{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAEaA,EAAO,SAAAC,GAAK,OAEjB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAKL,EAAMG,QAAQG,OAE3F,6BAAKN,EAAMG,QAAQG,OAH3B,IAIO,4BAAIN,EAAMG,QAAQI,YCLpBC,EAAW,SAAAR,GACpB,OACI,sBAAKC,UAAW,YAAhB,cAKQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCT1BO,G,MAAS,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAClB,aADoD,CACpD,SAAOZ,UAAU,SAASa,KAAK,SACxBF,YAAaA,EACbG,SAAUF,MCyCNG,E,kDAvCX,aAAe,IAAD,8BACV,gBAiBLH,aAAc,SAACI,GACV,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAjBpC,EAAKC,MAAQ,CACTb,SAAS,GACTU,YAAY,IAJN,E,qDAUlB,WAAqB,IAAD,OAIhBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAKzC,WAAS,MAC2BC,KAAKN,MAA7Bb,EADH,EACGA,SAASU,EADZ,EACYA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC3CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGvD,OACI,sBAAK9B,UAAU,MAAf,cACI,iDACA,cAAC,EAAD,CAASW,YAAY,iBAAiBC,aAAce,KAAKf,eACzD,cAAC,EAAD,CAAUJ,SAAUoB,IAHxB,W,GA9BUI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a4d40e8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css'\r\nexport const Card = props =>\r\n    (\r\n        <div className='card-container'>\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt={props.monster.name}/>\r\n\r\n                <h2>{props.monster.name}</h2> {/* props property is being used for monster name  */}\r\n               <p>{props.monster.email}</p>{/* props property is being used for monster Id  */}\r\n\r\n        </div>\r\n    );\r\n","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component'\r\nexport const CardList = props =>{ // props aworks as a parameter same as function\r\n    return (\r\n        <div className ='card-list'> {/*  this is the css here  */}\r\n\r\n            {/*{props.children} /!*  this will print what ever is on here thus could be anything in between cardlist *!/*/}\r\n            {\r\n                // eslint-disable-next-line array-callback-return\r\n                props.monsters.map(monster=>\r\n                    <Card key={monster.id} monster={monster}/> // key is being passed as a key and monster is being passed as a single object this will loop through it\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css'\r\nexport const Search = ({placeholder,handleChange}) => ( // desstrucring object is being passed here\r\n    <input className='search' type=\"search\"\r\n           placeholder={placeholder} // this is the name\r\n           onChange={handleChange}/> // this is a function\r\n);\r\n\r\n","\nimport './App.css';\nimport React, {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {Search} from \"./components/search/search.component\";\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            monsters:[],\n            searchField:''\n        }\n\n    }\n\n\ncomponentDidMount() { // life cycle method\n        // used componeent lifecycle cause of class method\n       // used the json format\n       // to get the users and set it to monsters.\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(users=>this.setState({monsters:users}));\n}\n   handleChange =(e) => {\n        this.setState({searchField:e.target.value});\n    };\n    render() { // comes built in with react component\n        const { monsters,searchField} = this.state; // destrucrting \n        const filterMonsters = monsters.filter(monster=>\n           monster.name.toLowerCase().includes(searchField.toLowerCase()) // this checks the comments.\n        )\n        \n    return (\n        <div className=\"App\"> {/* app is a componenent */}\n            <h1>Monster Rolodex</h1>\n            <Search  placeholder='search monster' handleChange={this.handleChange}/>\n            <CardList monsters={filterMonsters}/> {/* monster is being passed here fromt he class  */}\n\n\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}